<timestamp in zulu timezone>
<unique msg processing id>
<time since start of processing of the message> - custom span (perf logs)
<end to end trace id>
<hostname>
<process id>
<JS file name and location (optional)>
<message>
<log package>
<log Level>
<extension>
	<numeric>
    <string>

logger.debug(<msg>)
logger.debug(<msg>,<additionl object>);
logger.info(<msg>)
logger.info(<msg>,<additionl object>);
logger.warn(<msg>)
logger.warn(<msg>,<additionl object>);
logger.error(<msg>)
logger.error(<msg>,<additionl object>);

logger.startPerformanceLog() - log times from begining for every log message from here on
logger.performance(<log identifier>) - logs end to end message execution time until here with a message //make it a default option for all logs
logger.endPerformanceLog() - stops logging the times from begining

logger.startSpan(<span id>,<optional span specific baggage>)
logger.endSpan() - argument not required as it closes the current open span

logger.addToContext(<context obj>) - adds any additional data to the context
logger.getContext() - get the current context object (to add more data if needed)
logger.resetContext() - resets/removes any additional functional information being carried in the context like orderId (ideal for a express middleware?)
